// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.1
// source: game.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求
type GameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId"`
	PlayerId     string `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId"`
	MessageType  string `protobuf:"bytes,3,opt,name=messageType,proto3" json:"messageType"`
	MessageValue string `protobuf:"bytes,4,opt,name=messageValue,proto3" json:"messageValue"`
}

func (x *GameReq) Reset() {
	*x = GameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReq) ProtoMessage() {}

func (x *GameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReq.ProtoReflect.Descriptor instead.
func (*GameReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *GameReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GameReq) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *GameReq) GetMessageValue() string {
	if x != nil {
		return x.MessageValue
	}
	return ""
}

// 响应
type GameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       string   `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId"`
	PlayerId     string   `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId"`
	MessageType  string   `protobuf:"bytes,3,opt,name=messageType,proto3" json:"messageType"`
	MessageValue string   `protobuf:"bytes,4,opt,name=messageValue,proto3" json:"messageValue"`
	MazeMap      *MazeMap `protobuf:"bytes,5,opt,name=mazeMap,proto3" json:"mazeMap"`
	Players      []*Tank  `protobuf:"bytes,6,rep,name=players,proto3" json:"players"`
}

func (x *GameResp) Reset() {
	*x = GameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResp) ProtoMessage() {}

func (x *GameResp) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResp.ProtoReflect.Descriptor instead.
func (*GameResp) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *GameResp) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameResp) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GameResp) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *GameResp) GetMessageValue() string {
	if x != nil {
		return x.MessageValue
	}
	return ""
}

func (x *GameResp) GetMazeMap() *MazeMap {
	if x != nil {
		return x.MazeMap
	}
	return nil
}

func (x *GameResp) GetPlayers() []*Tank {
	if x != nil {
		return x.Players
	}
	return nil
}

type MazeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Width         int32            `protobuf:"varint,2,opt,name=width,proto3" json:"width"`
	Height        int32            `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	CellSize      int32            `protobuf:"varint,4,opt,name=cellSize,proto3" json:"cellSize"`
	Color         string           `protobuf:"bytes,5,opt,name=color,proto3" json:"color"`
	WallThickness int32            `protobuf:"varint,6,opt,name=wallThickness,proto3" json:"wallThickness"`
	Grids         []*Grid          `protobuf:"bytes,7,rep,name=grids,proto3" json:"grids"`
	GridWalls     map[string]*Wall `protobuf:"bytes,8,rep,name=gridWalls,proto3" json:"gridWalls" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MazeMap) Reset() {
	*x = MazeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MazeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MazeMap) ProtoMessage() {}

func (x *MazeMap) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MazeMap.ProtoReflect.Descriptor instead.
func (*MazeMap) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *MazeMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MazeMap) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MazeMap) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MazeMap) GetCellSize() int32 {
	if x != nil {
		return x.CellSize
	}
	return 0
}

func (x *MazeMap) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MazeMap) GetWallThickness() int32 {
	if x != nil {
		return x.WallThickness
	}
	return 0
}

func (x *MazeMap) GetGrids() []*Grid {
	if x != nil {
		return x.Grids
	}
	return nil
}

func (x *MazeMap) GetGridWalls() map[string]*Wall {
	if x != nil {
		return x.GridWalls
	}
	return nil
}

type Grid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grid []*SubGrid `protobuf:"bytes,1,rep,name=grid,proto3" json:"grid"`
}

func (x *Grid) Reset() {
	*x = Grid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grid) ProtoMessage() {}

func (x *Grid) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grid.ProtoReflect.Descriptor instead.
func (*Grid) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *Grid) GetGrid() []*SubGrid {
	if x != nil {
		return x.Grid
	}
	return nil
}

type SubGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       int32  `protobuf:"varint,1,opt,name=X,proto3" json:"X"`
	Y       int32  `protobuf:"varint,2,opt,name=Y,proto3" json:"Y"`
	Row     int32  `protobuf:"varint,3,opt,name=row,proto3" json:"row"`
	Col     int32  `protobuf:"varint,4,opt,name=col,proto3" json:"col"`
	Visited bool   `protobuf:"varint,5,opt,name=visited,proto3" json:"visited"`
	Walls   *Walls `protobuf:"bytes,6,opt,name=walls,proto3" json:"walls"`
}

func (x *SubGrid) Reset() {
	*x = SubGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGrid) ProtoMessage() {}

func (x *SubGrid) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGrid.ProtoReflect.Descriptor instead.
func (*SubGrid) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *SubGrid) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SubGrid) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SubGrid) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *SubGrid) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *SubGrid) GetVisited() bool {
	if x != nil {
		return x.Visited
	}
	return false
}

func (x *SubGrid) GetWalls() *Walls {
	if x != nil {
		return x.Walls
	}
	return nil
}

type Wall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wall []*SubWall `protobuf:"bytes,1,rep,name=wall,proto3" json:"wall"`
}

func (x *Wall) Reset() {
	*x = Wall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wall) ProtoMessage() {}

func (x *Wall) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wall.ProtoReflect.Descriptor instead.
func (*Wall) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *Wall) GetWall() []*SubWall {
	if x != nil {
		return x.Wall
	}
	return nil
}

type SubWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction string  `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction"`
	CenterX   float32 `protobuf:"fixed32,2,opt,name=centerX,proto3" json:"centerX"`
	CenterY   float32 `protobuf:"fixed32,3,opt,name=centerY,proto3" json:"centerY"`
	Width     int32   `protobuf:"varint,4,opt,name=width,proto3" json:"width"`
	Height    int32   `protobuf:"varint,5,opt,name=height,proto3" json:"height"`
}

func (x *SubWall) Reset() {
	*x = SubWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubWall) ProtoMessage() {}

func (x *SubWall) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubWall.ProtoReflect.Descriptor instead.
func (*SubWall) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *SubWall) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SubWall) GetCenterX() float32 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *SubWall) GetCenterY() float32 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

func (x *SubWall) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SubWall) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Walls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    bool `protobuf:"varint,1,opt,name=Top,proto3" json:"Top"`
	Bottom bool `protobuf:"varint,2,opt,name=Bottom,proto3" json:"Bottom"`
	Left   bool `protobuf:"varint,3,opt,name=Left,proto3" json:"Left"`
	Right  bool `protobuf:"varint,4,opt,name=Right,proto3" json:"Right"`
}

func (x *Walls) Reset() {
	*x = Walls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Walls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Walls) ProtoMessage() {}

func (x *Walls) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Walls.ProtoReflect.Descriptor instead.
func (*Walls) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

func (x *Walls) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

func (x *Walls) GetBottom() bool {
	if x != nil {
		return x.Bottom
	}
	return false
}

func (x *Walls) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *Walls) GetRight() bool {
	if x != nil {
		return x.Right
	}
	return false
}

type Cells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell1     *SubGrid `protobuf:"bytes,1,opt,name=cell1,proto3" json:"cell1"`
	Cell2     *SubGrid `protobuf:"bytes,2,opt,name=cell2,proto3" json:"cell2"`
	Direction string   `protobuf:"bytes,3,opt,name=Direction,proto3" json:"Direction"`
}

func (x *Cells) Reset() {
	*x = Cells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cells) ProtoMessage() {}

func (x *Cells) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cells.ProtoReflect.Descriptor instead.
func (*Cells) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *Cells) GetCell1() *SubGrid {
	if x != nil {
		return x.Cell1
	}
	return nil
}

func (x *Cells) GetCell2() *SubGrid {
	if x != nil {
		return x.Cell2
	}
	return nil
}

func (x *Cells) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type Tank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Width       int32     `protobuf:"varint,3,opt,name=width,proto3" json:"width"`
	Height      int32     `protobuf:"varint,4,opt,name=height,proto3" json:"height"`
	Alive       bool      `protobuf:"varint,5,opt,name=alive,proto3" json:"alive"`
	Score       int32     `protobuf:"varint,6,opt,name=score,proto3" json:"score"`
	Color       string    `protobuf:"bytes,7,opt,name=color,proto3" json:"color"`
	CenterX     float32   `protobuf:"fixed32,8,opt,name=centerX,proto3" json:"centerX"`
	CenterY     float32   `protobuf:"fixed32,9,opt,name=centerY,proto3" json:"centerY"`
	Rotation    float32   `protobuf:"fixed32,10,opt,name=rotation,proto3" json:"rotation"`
	Speed       float32   `protobuf:"fixed32,11,opt,name=speed,proto3" json:"speed"`
	BulletNum   int32     `protobuf:"varint,12,opt,name=bulletNum,proto3" json:"bulletNum"`
	Bullets     []*Bullet `protobuf:"bytes,13,rep,name=bullets,proto3" json:"bullets"`
	HitWall     bool      `protobuf:"varint,14,opt,name=hitWall,proto3" json:"hitWall"`
	NextCenterX float32   `protobuf:"fixed32,15,opt,name=nextCenterX,proto3" json:"nextCenterX"`
	NextCenterY float32   `protobuf:"fixed32,16,opt,name=nextCenterY,proto3" json:"nextCenterY"`
}

func (x *Tank) Reset() {
	*x = Tank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tank) ProtoMessage() {}

func (x *Tank) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tank.ProtoReflect.Descriptor instead.
func (*Tank) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *Tank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tank) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Tank) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Tank) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *Tank) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Tank) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Tank) GetCenterX() float32 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *Tank) GetCenterY() float32 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

func (x *Tank) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Tank) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Tank) GetBulletNum() int32 {
	if x != nil {
		return x.BulletNum
	}
	return 0
}

func (x *Tank) GetBullets() []*Bullet {
	if x != nil {
		return x.Bullets
	}
	return nil
}

func (x *Tank) GetHitWall() bool {
	if x != nil {
		return x.HitWall
	}
	return false
}

func (x *Tank) GetNextCenterX() float32 {
	if x != nil {
		return x.NextCenterX
	}
	return 0
}

func (x *Tank) GetNextCenterY() float32 {
	if x != nil {
		return x.NextCenterY
	}
	return 0
}

type Bullet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	From       string  `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	FirstShoot bool    `protobuf:"varint,3,opt,name=firstShoot,proto3" json:"firstShoot"`
	Color      string  `protobuf:"bytes,4,opt,name=color,proto3" json:"color"`
	Radius     float32 `protobuf:"fixed32,5,opt,name=radius,proto3" json:"radius"`
	Rotation   float32 `protobuf:"fixed32,6,opt,name=rotation,proto3" json:"rotation"`
	Speed      float32 `protobuf:"fixed32,7,opt,name=speed,proto3" json:"speed"`
	Bounces    int32   `protobuf:"varint,8,opt,name=bounces,proto3" json:"bounces"`
	CenterX    float32 `protobuf:"fixed32,9,opt,name=centerX,proto3" json:"centerX"`
	CenterY    float32 `protobuf:"fixed32,10,opt,name=centerY,proto3" json:"centerY"`
}

func (x *Bullet) Reset() {
	*x = Bullet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bullet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bullet) ProtoMessage() {}

func (x *Bullet) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bullet.ProtoReflect.Descriptor instead.
func (*Bullet) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *Bullet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bullet) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Bullet) GetFirstShoot() bool {
	if x != nil {
		return x.FirstShoot
	}
	return false
}

func (x *Bullet) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Bullet) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Bullet) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Bullet) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Bullet) GetBounces() int32 {
	if x != nil {
		return x.Bounces
	}
	return 0
}

func (x *Bullet) GetCenterX() float32 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *Bullet) GetCenterY() float32 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a,
	0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x6d, 0x61, 0x7a,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x61, 0x7a,
	0x65, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x6d, 0x61, 0x7a, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xb8,
	0x02, 0x0a, 0x07, 0x4d, 0x61, 0x7a, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x67, 0x72, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x61, 0x7a, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x73, 0x1a, 0x43, 0x0a, 0x0e, 0x47, 0x72, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x04, 0x47, 0x72, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x47, 0x72, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x58,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x59, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x77, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x05, 0x77, 0x61,
	0x6c, 0x6c, 0x73, 0x22, 0x24, 0x0a, 0x04, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x77,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x57,
	0x61, 0x6c, 0x6c, 0x52, 0x04, 0x77, 0x61, 0x6c, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x05, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x54, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x65, 0x0a, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x63,
	0x65, 0x6c, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x31, 0x12, 0x1e, 0x0a, 0x05, 0x63,
	0x65, 0x6c, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x04, 0x54, 0x61,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x22, 0xfa, 0x01, 0x0a, 0x06,
	0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData = file_game_proto_rawDesc
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_proto_rawDescData)
	})
	return file_game_proto_rawDescData
}

var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_game_proto_goTypes = []interface{}{
	(*GameReq)(nil),  // 0: GameReq
	(*GameResp)(nil), // 1: GameResp
	(*MazeMap)(nil),  // 2: MazeMap
	(*Grid)(nil),     // 3: Grid
	(*SubGrid)(nil),  // 4: SubGrid
	(*Wall)(nil),     // 5: Wall
	(*SubWall)(nil),  // 6: SubWall
	(*Walls)(nil),    // 7: Walls
	(*Cells)(nil),    // 8: Cells
	(*Tank)(nil),     // 9: Tank
	(*Bullet)(nil),   // 10: Bullet
	nil,              // 11: MazeMap.GridWallsEntry
}
var file_game_proto_depIdxs = []int32{
	2,  // 0: GameResp.mazeMap:type_name -> MazeMap
	9,  // 1: GameResp.players:type_name -> Tank
	3,  // 2: MazeMap.grids:type_name -> Grid
	11, // 3: MazeMap.gridWalls:type_name -> MazeMap.GridWallsEntry
	4,  // 4: Grid.grid:type_name -> SubGrid
	7,  // 5: SubGrid.walls:type_name -> Walls
	6,  // 6: Wall.wall:type_name -> SubWall
	4,  // 7: Cells.cell1:type_name -> SubGrid
	4,  // 8: Cells.cell2:type_name -> SubGrid
	10, // 9: Tank.bullets:type_name -> Bullet
	5,  // 10: MazeMap.GridWallsEntry.value:type_name -> Wall
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MazeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Walls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bullet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_rawDesc = nil
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
